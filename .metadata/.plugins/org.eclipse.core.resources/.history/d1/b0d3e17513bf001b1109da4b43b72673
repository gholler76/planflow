package com.holler.planflow.controllers;

import java.util.List;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;

import com.holler.planflow.models.Location;
import com.holler.planflow.services.LocationService;
import com.holler.planflow.services.PalletService;

@Controller
public class MainController {
	private final PalletService palletService;
	private final LocationService locationService;
 
	public MainController(
			PalletService palletService,
			LocationService locationService
			) {
		this.palletService = palletService;
		this.locationService = locationService;
	}

	// home test screen
	@GetMapping("/")
	public String home(Model model) {
		model.addAttribute("pallets", palletService.getAllPallets());
		model.addAttribute("locations", locationService.getAllLocations());
		List<Location> locs = locationService.getAllLocations();
		System.out.println(locs);
		return "home.jsp";
	}
	
	// basic redirect for creation posts
	@GetMapping("/success")
	public String success() {
		return "redirect:/";
	}
	
	// pallet generator	
	@PostMapping("/pallets")
	public String makePallets(@RequestParam(value="qty")Integer qty) {
		palletService.generatePallet(qty);
		return "redirect:/success";
	}

	// location generator	
	@PostMapping("/locations")
	public String makeLocations(
			@RequestParam(value="startRack") Integer startRack,
			@RequestParam(value="rackCount") Integer rackCount,
			@RequestParam(value="xcoors") Integer xcoors,
			@RequestParam(value="ycoors") Integer ycoors
			){
		locationService.generateLocation(startRack, rackCount, xcoors, ycoors);		
		System.out.println(startRack);
		System.out.println(rackCount);
		System.out.println(xcoors);
		System.out.println(ycoors);
		
		return "redirect:/success";
	}
	
	// delete all pallets
	@DeleteMapping('/deletep'){
		palletService.deleteAllPallets();
	}
	
}
